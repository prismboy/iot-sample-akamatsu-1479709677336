[{"id":"67ec6b60.002554","type":"ibmiot in","z":"c7e95e2a.78b0a","authentication":"boundService","apiKey":"","inputType":"evt","deviceId":"","applicationId":"","deviceType":"","eventType":"accel","commandType":"","format":"json","name":"IBM IoT App In","service":"registered","allDevices":true,"allApplications":"","allDeviceTypes":true,"allEvents":"","allCommands":"","allFormats":"","qos":0,"x":101,"y":119,"wires":[["fef28d60.6f47b8","2214a0e.fd58ee","9cdea9a5.8b3a78"]]},{"id":"fef28d60.6f47b8","type":"function","z":"c7e95e2a.78b0a","name":"calc color","func":"var accelX = msg.payload.d.acceleration_x;\nvar accelY = msg.payload.d.acceleration_y;\nvar accelZ = msg.payload.d.acceleration_z;\nvar r = Math.round(Math.abs(accelX) * 255);\nvar g = Math.round(Math.abs(accelY) * 255);\nvar b = Math.round(Math.abs(accelZ) * 255);\nif (r > 255) r=255;\nif (g > 255) g=255;\nif (b > 255) b=255;\na = 1.0;\nmsg.eventOrCommandType = \"color\";\nmsg.payload = JSON.stringify({\"d\":{\"r\":r,\"g\":g,\"b\":b,\"alpha\":a}});\nreturn msg;\n","outputs":1,"noerr":0,"x":306,"y":119.5,"wires":[["ea48e365.31e42"]]},{"id":"ea48e365.31e42","type":"ibmiot out","z":"c7e95e2a.78b0a","authentication":"boundService","apiKey":"","outputType":"cmd","deviceId":"112233445566","deviceType":"iPhone","eventCommandType":"text","format":"json","data":"{\"d\":{\"value\":\"text\"}}","qos":0,"name":"IBM IoT App Out","service":"registered","x":561,"y":118,"wires":[]},{"id":"2214a0e.fd58ee","type":"debug","z":"c7e95e2a.78b0a","name":"","active":false,"console":"false","complete":"false","x":306,"y":63,"wires":[]},{"id":"9cdea9a5.8b3a78","type":"function","z":"c7e95e2a.78b0a","name":"Convert XYZ","func":"msg.payload = {\n    \"axisX\": msg.payload.d.acceleration_x,\n    \"axisY\": msg.payload.d.acceleration_y,\n    \"axisZ\": msg.payload.d.acceleration_z\n}\n\nreturn msg;","outputs":1,"noerr":0,"x":314,"y":225.5,"wires":[["a36f5e51.3fb2d"]]},{"id":"a36f5e51.3fb2d","type":"websocket out","z":"c7e95e2a.78b0a","name":"","server":"e75a86f3.4e09a8","client":"","x":557,"y":226,"wires":[]},{"id":"bc56b78.4567ac8","type":"http in","z":"c7e95e2a.78b0a","name":"","url":"/inclination","method":"get","swaggerDoc":"","x":103,"y":314.5,"wires":[["c6b3cba4.ba7218"]]},{"id":"c6b3cba4.ba7218","type":"template","z":"c7e95e2a.78b0a","name":"Base Page","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Sensor Data Visualization</title>\n    \n    <script type=\"text/javascript\" src=\"//www.google.com/jsapi\"></script>\n    \n    <script type=\"text/javascript\">\n      var wsUrl = 'wss://iot-sample-akamatsu.mybluemix.net/ws/inclination';\n      \n      var socket;\n      var axisData;\n      var axisOptions;\n      var axisChart;\n      var accelColor;\n      \n      // Google Gauge\n      google.load(\"visualization\", \"1\", {packages:[\"gauge\"]});\n      google.setOnLoadCallback(drawChart);\n      function drawChart() {\n        // Data for temperature chart\n        axisData = google.visualization.arrayToDataTable([\n          ['Label', 'Value'],\n          ['Axis X', 0],\n          ['Axis Y', 0],\n          ['Axis Z', 0]\n        ]);\n        \n        // Option for temperature chart\n        // If you want to set other options, please refer to https://developers.google.com/chart/interactive/docs/gallery/gauge\n        axisOptions = {\n          width: 720, height: 240,\n          min: -1.1, max: 1.1,\n          /*redFrom: -0.3, redTo: 0.3,\n          yellowFrom:0.3, yellowTo: 1.0,*/\n          minorTicks: 5\n        };\n        \n        axisChart = new google.visualization.Gauge(document.getElementById('axisChart'));\n        axisChart.draw(axisData, axisOptions);\n\n        accelColor = document.getElementById('accelColor');\n      };\n      \n      function connect() {\n        socket = new WebSocket(wsUrl);\n        socket.onmessage = function(e) {\n          var sensorData = JSON.parse(e.data);\n          \n          // Update temperature data\n          axisData.setValue(0, 1, sensorData.axisX);\n          axisData.setValue(1, 1, sensorData.axisY);\n          axisData.setValue(2, 1, sensorData.axisZ);\n          \n          axisChart.draw(axisData, axisOptions);\n          var r = Math.round(Math.abs(sensorData.axisX) * 255);\n          var g = Math.round(Math.abs(sensorData.axisY) * 255);\n          var b = Math.round(Math.abs(sensorData.axisZ) * 255);\n          if(r>255) r=255;\n          if(g>255) g=255;\n          if(b>255) b=255;\n          var color = \"#\"+r.toString(16)+g.toString(16)+b.toString(16);\n          accelColor.style.backgroundColor = color;\n        };\n      };\n      \n      function disconnect() {\n        socket.close();\n      };\n        \n    </script>\n  </head>\n  <body onload=\"connect()\" onfocus=\"connect()\">\n    <h2>Watson IoT Sample Web</h2>\n    \n    <div id=\"accelColor\">\n        <span id=\"axisChart\" style=\"width: 720px; height: 240px;\"></span>\n    </div>\n  </body>\n</html>","x":337,"y":315,"wires":[["e7b6ea47.93cc1"]]},{"id":"e7b6ea47.93cc1","type":"http response","z":"c7e95e2a.78b0a","name":"","x":574,"y":315,"wires":[]},{"id":"e75a86f3.4e09a8","type":"websocket-listener","z":"c7e95e2a.78b0a","path":"/ws/inclination","wholemsg":"false"}]